// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: payment.proto

package payment_host

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentHostService_Register_FullMethodName = "/PaymentHostService/Register"
	PaymentHostService_Withdraw_FullMethodName = "/PaymentHostService/Withdraw"
)

// PaymentHostServiceClient is the client API for PaymentHostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentHostServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
}

type paymentHostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentHostServiceClient(cc grpc.ClientConnInterface) PaymentHostServiceClient {
	return &paymentHostServiceClient{cc}
}

func (c *paymentHostServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PaymentHostService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentHostServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, PaymentHostService_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentHostServiceServer is the server API for PaymentHostService service.
// All implementations must embed UnimplementedPaymentHostServiceServer
// for forward compatibility
type PaymentHostServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	mustEmbedUnimplementedPaymentHostServiceServer()
}

// UnimplementedPaymentHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentHostServiceServer struct {
}

func (UnimplementedPaymentHostServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPaymentHostServiceServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedPaymentHostServiceServer) mustEmbedUnimplementedPaymentHostServiceServer() {}

// UnsafePaymentHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentHostServiceServer will
// result in compilation errors.
type UnsafePaymentHostServiceServer interface {
	mustEmbedUnimplementedPaymentHostServiceServer()
}

func RegisterPaymentHostServiceServer(s grpc.ServiceRegistrar, srv PaymentHostServiceServer) {
	s.RegisterService(&PaymentHostService_ServiceDesc, srv)
}

func _PaymentHostService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentHostServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentHostService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentHostServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentHostService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentHostServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentHostService_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentHostServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentHostService_ServiceDesc is the grpc.ServiceDesc for PaymentHostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentHostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentHostService",
	HandlerType: (*PaymentHostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PaymentHostService_Register_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _PaymentHostService_Withdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
