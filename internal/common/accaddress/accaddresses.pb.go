// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aioz/common/v1/accaddresses.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccAddresses struct {
	Addresses []AccAddress `protobuf:"bytes,1,rep,name=addresses,proto3,customtype=AccAddress" json:"addresses"`
}

func (m *AccAddresses) Reset()         { *m = AccAddresses{} }
func (m *AccAddresses) String() string { return proto.CompactTextString(m) }
func (*AccAddresses) ProtoMessage()    {}
func (*AccAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_e00e8ca302f856ec, []int{0}
}
func (m *AccAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccAddresses.Merge(m, src)
}
func (m *AccAddresses) XXX_Size() int {
	return m.Size()
}
func (m *AccAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_AccAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_AccAddresses proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AccAddresses)(nil), "aioz.common.v1.AccAddresses")
}

func init() { proto.RegisterFile("aioz/common/v1/accaddresses.proto", fileDescriptor_e00e8ca302f856ec) }

var fileDescriptor_e00e8ca302f856ec = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xcc, 0xcc, 0xaf,
	0xd2, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x2f, 0x33, 0xd4, 0x4f, 0x4c, 0x4e, 0x4e, 0x4c,
	0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x03,
	0x29, 0xd1, 0x83, 0x28, 0xd1, 0x2b, 0x33, 0x94, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xe9,
	0x83, 0x58, 0x10, 0x55, 0x4a, 0x0e, 0x5c, 0x3c, 0x8e, 0xc9, 0xc9, 0x8e, 0x30, 0xbd, 0x42, 0x06,
	0x5c, 0x9c, 0x70, 0x83, 0x24, 0x18, 0x15, 0x98, 0x35, 0x38, 0x9d, 0x84, 0x4e, 0xdc, 0x93, 0x67,
	0xb8, 0x75, 0x4f, 0x9e, 0x0b, 0xa1, 0x30, 0x08, 0xa1, 0xc8, 0xc9, 0xe5, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39,
	0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xb4, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0x40, 0x6e, 0xd0,
	0x77, 0xf4, 0xf4, 0x8f, 0xf2, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0xcf, 0xd7, 0x05,
	0xb9, 0x4d, 0x37, 0x37, 0x35, 0x25, 0x33, 0x51, 0xbf, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d,
	0xec, 0x1c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x4b, 0x3b, 0x87, 0xd9, 0x00, 0x00,
	0x00,
}

func (m *AccAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Addresses[iNdEx].Size()
				i -= size
				if _, err := m.Addresses[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAccaddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccaddresses(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccaddresses(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovAccaddresses(uint64(l))
		}
	}
	return n
}

func sovAccaddresses(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccaddresses(x uint64) (n int) {
	return sovAccaddresses(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccaddresses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccaddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccaddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccaddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v AccAddress
			m.Addresses = append(m.Addresses, v)
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccaddresses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccaddresses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccaddresses(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccaddresses
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccaddresses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccaddresses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccaddresses
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccaddresses
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccaddresses
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccaddresses        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccaddresses          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccaddresses = fmt.Errorf("proto: unexpected end of group")
)
